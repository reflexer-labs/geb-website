{"version":3,"file":"fe15a0ab14cbf2df20fdfacd944d9c6e575b07cf-8fb6c304fd45cad97c0a.js","mappings":"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","sources":["webpack://geb-website/./node_modules/numeral/numeral.js","webpack://geb-website/./src/utils/helper.js"],"sourcesContent":["/*! @preserve\n * numeral.js\n * version : 2.0.6\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function (global, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(factory);\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = factory();\n  } else {\n    global.numeral = factory();\n  }\n})(this, function () {\n  /************************************\n      Variables\n  ************************************/\n\n  var numeral,\n    _,\n    VERSION = '2.0.6',\n    formats = {},\n    locales = {},\n    defaults = {\n      currentLocale: 'en',\n      zeroFormat: null,\n      nullFormat: null,\n      defaultFormat: '0,0',\n      scalePercentBy100: true\n    },\n    options = {\n      currentLocale: defaults.currentLocale,\n      zeroFormat: defaults.zeroFormat,\n      nullFormat: defaults.nullFormat,\n      defaultFormat: defaults.defaultFormat,\n      scalePercentBy100: defaults.scalePercentBy100\n    };\n\n  /************************************\n      Constructors\n  ************************************/\n\n  // Numeral prototype object\n  function Numeral(input, number) {\n    this._input = input;\n    this._value = number;\n  }\n  numeral = function (input) {\n    var value, kind, unformatFunction, regexp;\n    if (numeral.isNumeral(input)) {\n      value = input.value();\n    } else if (input === 0 || typeof input === 'undefined') {\n      value = 0;\n    } else if (input === null || _.isNaN(input)) {\n      value = null;\n    } else if (typeof input === 'string') {\n      if (options.zeroFormat && input === options.zeroFormat) {\n        value = 0;\n      } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {\n        value = null;\n      } else {\n        for (kind in formats) {\n          regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;\n          if (regexp && input.match(regexp)) {\n            unformatFunction = formats[kind].unformat;\n            break;\n          }\n        }\n        unformatFunction = unformatFunction || numeral._.stringToNumber;\n        value = unformatFunction(input);\n      }\n    } else {\n      value = Number(input) || null;\n    }\n    return new Numeral(input, value);\n  };\n\n  // version number\n  numeral.version = VERSION;\n\n  // compare numeral object\n  numeral.isNumeral = function (obj) {\n    return obj instanceof Numeral;\n  };\n\n  // helper functions\n  numeral._ = _ = {\n    // formats numbers separators, decimals places, signs, abbreviations\n    numberToFormat: function (value, format, roundingFunction) {\n      var locale = locales[numeral.options.currentLocale],\n        negP = false,\n        optDec = false,\n        leadingCount = 0,\n        abbr = '',\n        trillion = 1000000000000,\n        billion = 1000000000,\n        million = 1000000,\n        thousand = 1000,\n        decimal = '',\n        neg = false,\n        abbrForce,\n        // force abbreviation\n        abs,\n        min,\n        max,\n        power,\n        int,\n        precision,\n        signed,\n        thousands,\n        output;\n\n      // make sure we never format a null value\n      value = value || 0;\n      abs = Math.abs(value);\n\n      // see if we should use parentheses for negative number or if we should prefix with a sign\n      // if both are present we default to parentheses\n      if (numeral._.includes(format, '(')) {\n        negP = true;\n        format = format.replace(/[\\(|\\)]/g, '');\n      } else if (numeral._.includes(format, '+') || numeral._.includes(format, '-')) {\n        signed = numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;\n        format = format.replace(/[\\+|\\-]/g, '');\n      }\n\n      // see if abbreviation is wanted\n      if (numeral._.includes(format, 'a')) {\n        abbrForce = format.match(/a(k|m|b|t)?/);\n        abbrForce = abbrForce ? abbrForce[1] : false;\n\n        // check for space before abbreviation\n        if (numeral._.includes(format, ' a')) {\n          abbr = ' ';\n        }\n        format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');\n        if (abs >= trillion && !abbrForce || abbrForce === 't') {\n          // trillion\n          abbr += locale.abbreviations.trillion;\n          value = value / trillion;\n        } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {\n          // billion\n          abbr += locale.abbreviations.billion;\n          value = value / billion;\n        } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {\n          // million\n          abbr += locale.abbreviations.million;\n          value = value / million;\n        } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {\n          // thousand\n          abbr += locale.abbreviations.thousand;\n          value = value / thousand;\n        }\n      }\n\n      // check for optional decimals\n      if (numeral._.includes(format, '[.]')) {\n        optDec = true;\n        format = format.replace('[.]', '.');\n      }\n\n      // break number and format\n      int = value.toString().split('.')[0];\n      precision = format.split('.')[1];\n      thousands = format.indexOf(',');\n      leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;\n      if (precision) {\n        if (numeral._.includes(precision, '[')) {\n          precision = precision.replace(']', '');\n          precision = precision.split('[');\n          decimal = numeral._.toFixed(value, precision[0].length + precision[1].length, roundingFunction, precision[1].length);\n        } else {\n          decimal = numeral._.toFixed(value, precision.length, roundingFunction);\n        }\n        int = decimal.split('.')[0];\n        if (numeral._.includes(decimal, '.')) {\n          decimal = locale.delimiters.decimal + decimal.split('.')[1];\n        } else {\n          decimal = '';\n        }\n        if (optDec && Number(decimal.slice(1)) === 0) {\n          decimal = '';\n        }\n      } else {\n        int = numeral._.toFixed(value, 0, roundingFunction);\n      }\n\n      // check abbreviation again after rounding\n      if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {\n        int = String(Number(int) / 1000);\n        switch (abbr) {\n          case locale.abbreviations.thousand:\n            abbr = locale.abbreviations.million;\n            break;\n          case locale.abbreviations.million:\n            abbr = locale.abbreviations.billion;\n            break;\n          case locale.abbreviations.billion:\n            abbr = locale.abbreviations.trillion;\n            break;\n        }\n      }\n\n      // format number\n      if (numeral._.includes(int, '-')) {\n        int = int.slice(1);\n        neg = true;\n      }\n      if (int.length < leadingCount) {\n        for (var i = leadingCount - int.length; i > 0; i--) {\n          int = '0' + int;\n        }\n      }\n      if (thousands > -1) {\n        int = int.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + locale.delimiters.thousands);\n      }\n      if (format.indexOf('.') === 0) {\n        int = '';\n      }\n      output = int + decimal + (abbr ? abbr : '');\n      if (negP) {\n        output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');\n      } else {\n        if (signed >= 0) {\n          output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');\n        } else if (neg) {\n          output = '-' + output;\n        }\n      }\n      return output;\n    },\n    // unformats numbers separators, decimals places, signs, abbreviations\n    stringToNumber: function (string) {\n      var locale = locales[options.currentLocale],\n        stringOriginal = string,\n        abbreviations = {\n          thousand: 3,\n          million: 6,\n          billion: 9,\n          trillion: 12\n        },\n        abbreviation,\n        value,\n        i,\n        regexp;\n      if (options.zeroFormat && string === options.zeroFormat) {\n        value = 0;\n      } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {\n        value = null;\n      } else {\n        value = 1;\n        if (locale.delimiters.decimal !== '.') {\n          string = string.replace(/\\./g, '').replace(locale.delimiters.decimal, '.');\n        }\n        for (abbreviation in abbreviations) {\n          regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\\\)|(\\\\' + locale.currency.symbol + ')?(?:\\\\))?)?$');\n          if (stringOriginal.match(regexp)) {\n            value *= Math.pow(10, abbreviations[abbreviation]);\n            break;\n          }\n        }\n\n        // check for negative number\n        value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;\n\n        // remove non numbers\n        string = string.replace(/[^0-9\\.]+/g, '');\n        value *= Number(string);\n      }\n      return value;\n    },\n    isNaN: function (value) {\n      return typeof value === 'number' && isNaN(value);\n    },\n    includes: function (string, search) {\n      return string.indexOf(search) !== -1;\n    },\n    insert: function (string, subString, start) {\n      return string.slice(0, start) + subString + string.slice(start);\n    },\n    reduce: function (array, callback /*, initialValue*/) {\n      if (this === null) {\n        throw new TypeError('Array.prototype.reduce called on null or undefined');\n      }\n      if (typeof callback !== 'function') {\n        throw new TypeError(callback + ' is not a function');\n      }\n      var t = Object(array),\n        len = t.length >>> 0,\n        k = 0,\n        value;\n      if (arguments.length === 3) {\n        value = arguments[2];\n      } else {\n        while (k < len && !(k in t)) {\n          k++;\n        }\n        if (k >= len) {\n          throw new TypeError('Reduce of empty array with no initial value');\n        }\n        value = t[k++];\n      }\n      for (; k < len; k++) {\n        if (k in t) {\n          value = callback(value, t[k], k, t);\n        }\n      }\n      return value;\n    },\n    /**\n     * Computes the multiplier necessary to make x >= 1,\n     * effectively eliminating miscalculations caused by\n     * finite precision.\n     */\n    multiplier: function (x) {\n      var parts = x.toString().split('.');\n      return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);\n    },\n    /**\n     * Given a variable number of arguments, returns the maximum\n     * multiplier that must be used to normalize an operation involving\n     * all of them.\n     */\n    correctionFactor: function () {\n      var args = Array.prototype.slice.call(arguments);\n      return args.reduce(function (accum, next) {\n        var mn = _.multiplier(next);\n        return accum > mn ? accum : mn;\n      }, 1);\n    },\n    /**\n     * Implementation of toFixed() that treats floats more like decimals\n     *\n     * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n     * problems for accounting- and finance-related software.\n     */\n    toFixed: function (value, maxDecimals, roundingFunction, optionals) {\n      var splitValue = value.toString().split('.'),\n        minDecimals = maxDecimals - (optionals || 0),\n        boundedPrecision,\n        optionalsRegExp,\n        power,\n        output;\n\n      // Use the smallest precision value possible to avoid errors from floating point representation\n      if (splitValue.length === 2) {\n        boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n      } else {\n        boundedPrecision = minDecimals;\n      }\n      power = Math.pow(10, boundedPrecision);\n\n      // Multiply up by precision, round accurately, then divide and use native toFixed():\n      output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);\n      if (optionals > maxDecimals - boundedPrecision) {\n        optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n        output = output.replace(optionalsRegExp, '');\n      }\n      return output;\n    }\n  };\n\n  // avaliable options\n  numeral.options = options;\n\n  // avaliable formats\n  numeral.formats = formats;\n\n  // avaliable formats\n  numeral.locales = locales;\n\n  // This function sets the current locale.  If\n  // no arguments are passed in, it will simply return the current global\n  // locale key.\n  numeral.locale = function (key) {\n    if (key) {\n      options.currentLocale = key.toLowerCase();\n    }\n    return options.currentLocale;\n  };\n\n  // This function provides access to the loaded locale data.  If\n  // no arguments are passed in, it will simply return the current\n  // global locale object.\n  numeral.localeData = function (key) {\n    if (!key) {\n      return locales[options.currentLocale];\n    }\n    key = key.toLowerCase();\n    if (!locales[key]) {\n      throw new Error('Unknown locale : ' + key);\n    }\n    return locales[key];\n  };\n  numeral.reset = function () {\n    for (var property in defaults) {\n      options[property] = defaults[property];\n    }\n  };\n  numeral.zeroFormat = function (format) {\n    options.zeroFormat = typeof format === 'string' ? format : null;\n  };\n  numeral.nullFormat = function (format) {\n    options.nullFormat = typeof format === 'string' ? format : null;\n  };\n  numeral.defaultFormat = function (format) {\n    options.defaultFormat = typeof format === 'string' ? format : '0.0';\n  };\n  numeral.register = function (type, name, format) {\n    name = name.toLowerCase();\n    if (this[type + 's'][name]) {\n      throw new TypeError(name + ' ' + type + ' already registered.');\n    }\n    this[type + 's'][name] = format;\n    return format;\n  };\n  numeral.validate = function (val, culture) {\n    var _decimalSep, _thousandSep, _currSymbol, _valArray, _abbrObj, _thousandRegEx, localeData, temp;\n\n    //coerce val to string\n    if (typeof val !== 'string') {\n      val += '';\n      if (console.warn) {\n        console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n      }\n    }\n\n    //trim whitespaces from either sides\n    val = val.trim();\n\n    //if val is just digits return true\n    if (!!val.match(/^\\d+$/)) {\n      return true;\n    }\n\n    //if val is empty return false\n    if (val === '') {\n      return false;\n    }\n\n    //get the decimal and thousands separator from numeral.localeData\n    try {\n      //check if the culture is understood by numeral. if not, default it to current locale\n      localeData = numeral.localeData(culture);\n    } catch (e) {\n      localeData = numeral.localeData(numeral.locale());\n    }\n\n    //setup the delimiters and currency symbol based on culture/locale\n    _currSymbol = localeData.currency.symbol;\n    _abbrObj = localeData.abbreviations;\n    _decimalSep = localeData.delimiters.decimal;\n    if (localeData.delimiters.thousands === '.') {\n      _thousandSep = '\\\\.';\n    } else {\n      _thousandSep = localeData.delimiters.thousands;\n    }\n\n    // validating currency symbol\n    temp = val.match(/^[^\\d]+/);\n    if (temp !== null) {\n      val = val.substr(1);\n      if (temp[0] !== _currSymbol) {\n        return false;\n      }\n    }\n\n    //validating abbreviation symbol\n    temp = val.match(/[^\\d]+$/);\n    if (temp !== null) {\n      val = val.slice(0, -1);\n      if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n        return false;\n      }\n    }\n    _thousandRegEx = new RegExp(_thousandSep + '{2}');\n    if (!val.match(/[^\\d.,]/g)) {\n      _valArray = val.split(_decimalSep);\n      if (_valArray.length > 2) {\n        return false;\n      } else {\n        if (_valArray.length < 2) {\n          return !!_valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx);\n        } else {\n          if (_valArray[0].length === 1) {\n            return !!_valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !!_valArray[1].match(/^\\d+$/);\n          } else {\n            return !!_valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !!_valArray[1].match(/^\\d+$/);\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  /************************************\n      Numeral Prototype\n  ************************************/\n\n  numeral.fn = Numeral.prototype = {\n    clone: function () {\n      return numeral(this);\n    },\n    format: function (inputString, roundingFunction) {\n      var value = this._value,\n        format = inputString || options.defaultFormat,\n        kind,\n        output,\n        formatFunction;\n\n      // make sure we have a roundingFunction\n      roundingFunction = roundingFunction || Math.round;\n\n      // format based on value\n      if (value === 0 && options.zeroFormat !== null) {\n        output = options.zeroFormat;\n      } else if (value === null && options.nullFormat !== null) {\n        output = options.nullFormat;\n      } else {\n        for (kind in formats) {\n          if (format.match(formats[kind].regexps.format)) {\n            formatFunction = formats[kind].format;\n            break;\n          }\n        }\n        formatFunction = formatFunction || numeral._.numberToFormat;\n        output = formatFunction(value, format, roundingFunction);\n      }\n      return output;\n    },\n    value: function () {\n      return this._value;\n    },\n    input: function () {\n      return this._input;\n    },\n    set: function (value) {\n      this._value = Number(value);\n      return this;\n    },\n    add: function (value) {\n      var corrFactor = _.correctionFactor.call(null, this._value, value);\n      function cback(accum, curr, currI, O) {\n        return accum + Math.round(corrFactor * curr);\n      }\n      this._value = _.reduce([this._value, value], cback, 0) / corrFactor;\n      return this;\n    },\n    subtract: function (value) {\n      var corrFactor = _.correctionFactor.call(null, this._value, value);\n      function cback(accum, curr, currI, O) {\n        return accum - Math.round(corrFactor * curr);\n      }\n      this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;\n      return this;\n    },\n    multiply: function (value) {\n      function cback(accum, curr, currI, O) {\n        var corrFactor = _.correctionFactor(accum, curr);\n        return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);\n      }\n      this._value = _.reduce([this._value, value], cback, 1);\n      return this;\n    },\n    divide: function (value) {\n      function cback(accum, curr, currI, O) {\n        var corrFactor = _.correctionFactor(accum, curr);\n        return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);\n      }\n      this._value = _.reduce([this._value, value], cback);\n      return this;\n    },\n    difference: function (value) {\n      return Math.abs(numeral(this._value).subtract(value).value());\n    }\n  };\n\n  /************************************\n      Default Locale && Format\n  ************************************/\n\n  numeral.register('locale', 'en', {\n    delimiters: {\n      thousands: ',',\n      decimal: '.'\n    },\n    abbreviations: {\n      thousand: 'k',\n      million: 'm',\n      billion: 'b',\n      trillion: 't'\n    },\n    ordinal: function (number) {\n      var b = number % 10;\n      return ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';\n    },\n    currency: {\n      symbol: '$'\n    }\n  });\n  (function () {\n    numeral.register('format', 'bps', {\n      regexps: {\n        format: /(BPS)/,\n        unformat: /(BPS)/\n      },\n      format: function (value, format, roundingFunction) {\n        var space = numeral._.includes(format, ' BPS') ? ' ' : '',\n          output;\n        value = value * 10000;\n\n        // check for space before BPS\n        format = format.replace(/\\s?BPS/, '');\n        output = numeral._.numberToFormat(value, format, roundingFunction);\n        if (numeral._.includes(output, ')')) {\n          output = output.split('');\n          output.splice(-1, 0, space + 'BPS');\n          output = output.join('');\n        } else {\n          output = output + space + 'BPS';\n        }\n        return output;\n      },\n      unformat: function (string) {\n        return +(numeral._.stringToNumber(string) * 0.0001).toFixed(15);\n      }\n    });\n  })();\n  (function () {\n    var decimal = {\n        base: 1000,\n        suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n      },\n      binary = {\n        base: 1024,\n        suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n      };\n    var allSuffixes = decimal.suffixes.concat(binary.suffixes.filter(function (item) {\n      return decimal.suffixes.indexOf(item) < 0;\n    }));\n    var unformatRegex = allSuffixes.join('|');\n    // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)\n    unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';\n    numeral.register('format', 'bytes', {\n      regexps: {\n        format: /([0\\s]i?b)/,\n        unformat: new RegExp(unformatRegex)\n      },\n      format: function (value, format, roundingFunction) {\n        var output,\n          bytes = numeral._.includes(format, 'ib') ? binary : decimal,\n          suffix = numeral._.includes(format, ' b') || numeral._.includes(format, ' ib') ? ' ' : '',\n          power,\n          min,\n          max;\n\n        // check for space before\n        format = format.replace(/\\s?i?b/, '');\n        for (power = 0; power <= bytes.suffixes.length; power++) {\n          min = Math.pow(bytes.base, power);\n          max = Math.pow(bytes.base, power + 1);\n          if (value === null || value === 0 || value >= min && value < max) {\n            suffix += bytes.suffixes[power];\n            if (min > 0) {\n              value = value / min;\n            }\n            break;\n          }\n        }\n        output = numeral._.numberToFormat(value, format, roundingFunction);\n        return output + suffix;\n      },\n      unformat: function (string) {\n        var value = numeral._.stringToNumber(string),\n          power,\n          bytesMultiplier;\n        if (value) {\n          for (power = decimal.suffixes.length - 1; power >= 0; power--) {\n            if (numeral._.includes(string, decimal.suffixes[power])) {\n              bytesMultiplier = Math.pow(decimal.base, power);\n              break;\n            }\n            if (numeral._.includes(string, binary.suffixes[power])) {\n              bytesMultiplier = Math.pow(binary.base, power);\n              break;\n            }\n          }\n          value *= bytesMultiplier || 1;\n        }\n        return value;\n      }\n    });\n  })();\n  (function () {\n    numeral.register('format', 'currency', {\n      regexps: {\n        format: /(\\$)/\n      },\n      format: function (value, format, roundingFunction) {\n        var locale = numeral.locales[numeral.options.currentLocale],\n          symbols = {\n            before: format.match(/^([\\+|\\-|\\(|\\s|\\$]*)/)[0],\n            after: format.match(/([\\+|\\-|\\)|\\s|\\$]*)$/)[0]\n          },\n          output,\n          symbol,\n          i;\n\n        // strip format of spaces and $\n        format = format.replace(/\\s?\\$\\s?/, '');\n\n        // format the number\n        output = numeral._.numberToFormat(value, format, roundingFunction);\n\n        // update the before and after based on value\n        if (value >= 0) {\n          symbols.before = symbols.before.replace(/[\\-\\(]/, '');\n          symbols.after = symbols.after.replace(/[\\-\\)]/, '');\n        } else if (value < 0 && !numeral._.includes(symbols.before, '-') && !numeral._.includes(symbols.before, '(')) {\n          symbols.before = '-' + symbols.before;\n        }\n\n        // loop through each before symbol\n        for (i = 0; i < symbols.before.length; i++) {\n          symbol = symbols.before[i];\n          switch (symbol) {\n            case '$':\n              output = numeral._.insert(output, locale.currency.symbol, i);\n              break;\n            case ' ':\n              output = numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);\n              break;\n          }\n        }\n\n        // loop through each after symbol\n        for (i = symbols.after.length - 1; i >= 0; i--) {\n          symbol = symbols.after[i];\n          switch (symbol) {\n            case '$':\n              output = i === symbols.after.length - 1 ? output + locale.currency.symbol : numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));\n              break;\n            case ' ':\n              output = i === symbols.after.length - 1 ? output + ' ' : numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));\n              break;\n          }\n        }\n        return output;\n      }\n    });\n  })();\n  (function () {\n    numeral.register('format', 'exponential', {\n      regexps: {\n        format: /(e\\+|e-)/,\n        unformat: /(e\\+|e-)/\n      },\n      format: function (value, format, roundingFunction) {\n        var output,\n          exponential = typeof value === 'number' && !numeral._.isNaN(value) ? value.toExponential() : '0e+0',\n          parts = exponential.split('e');\n        format = format.replace(/e[\\+|\\-]{1}0/, '');\n        output = numeral._.numberToFormat(Number(parts[0]), format, roundingFunction);\n        return output + 'e' + parts[1];\n      },\n      unformat: function (string) {\n        var parts = numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),\n          value = Number(parts[0]),\n          power = Number(parts[1]);\n        power = numeral._.includes(string, 'e-') ? power *= -1 : power;\n        function cback(accum, curr, currI, O) {\n          var corrFactor = numeral._.correctionFactor(accum, curr),\n            num = accum * corrFactor * (curr * corrFactor) / (corrFactor * corrFactor);\n          return num;\n        }\n        return numeral._.reduce([value, Math.pow(10, power)], cback, 1);\n      }\n    });\n  })();\n  (function () {\n    numeral.register('format', 'ordinal', {\n      regexps: {\n        format: /(o)/\n      },\n      format: function (value, format, roundingFunction) {\n        var locale = numeral.locales[numeral.options.currentLocale],\n          output,\n          ordinal = numeral._.includes(format, ' o') ? ' ' : '';\n\n        // check for space before\n        format = format.replace(/\\s?o/, '');\n        ordinal += locale.ordinal(value);\n        output = numeral._.numberToFormat(value, format, roundingFunction);\n        return output + ordinal;\n      }\n    });\n  })();\n  (function () {\n    numeral.register('format', 'percentage', {\n      regexps: {\n        format: /(%)/,\n        unformat: /(%)/\n      },\n      format: function (value, format, roundingFunction) {\n        var space = numeral._.includes(format, ' %') ? ' ' : '',\n          output;\n        if (numeral.options.scalePercentBy100) {\n          value = value * 100;\n        }\n\n        // check for space before %\n        format = format.replace(/\\s?\\%/, '');\n        output = numeral._.numberToFormat(value, format, roundingFunction);\n        if (numeral._.includes(output, ')')) {\n          output = output.split('');\n          output.splice(-1, 0, space + '%');\n          output = output.join('');\n        } else {\n          output = output + space + '%';\n        }\n        return output;\n      },\n      unformat: function (string) {\n        var number = numeral._.stringToNumber(string);\n        if (numeral.options.scalePercentBy100) {\n          return number * 0.01;\n        }\n        return number;\n      }\n    });\n  })();\n  (function () {\n    numeral.register('format', 'time', {\n      regexps: {\n        format: /(:)/,\n        unformat: /(:)/\n      },\n      format: function (value, format, roundingFunction) {\n        var hours = Math.floor(value / 60 / 60),\n          minutes = Math.floor((value - hours * 60 * 60) / 60),\n          seconds = Math.round(value - hours * 60 * 60 - minutes * 60);\n        return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n      },\n      unformat: function (string) {\n        var timeArray = string.split(':'),\n          seconds = 0;\n\n        // turn hours and minutes into seconds and add them all up\n        if (timeArray.length === 3) {\n          // hours\n          seconds = seconds + Number(timeArray[0]) * 60 * 60;\n          // minutes\n          seconds = seconds + Number(timeArray[1]) * 60;\n          // seconds\n          seconds = seconds + Number(timeArray[2]);\n        } else if (timeArray.length === 2) {\n          // minutes\n          seconds = seconds + Number(timeArray[0]) * 60;\n          // seconds\n          seconds = seconds + Number(timeArray[1]);\n        }\n        return Number(seconds);\n      }\n    });\n  })();\n  return numeral;\n});","import Numeral from \"numeral\"\n\nexport const SmoothVerticalScrolling = (e, time, where) => {\n  var eTop = e.getBoundingClientRect().top\n  var eAmt = eTop / 100\n  var curTime = 0\n  while (curTime <= time) {\n    window.setTimeout(SVS_B, curTime, eAmt, where)\n    curTime += time / 100\n  }\n}\n\nexport const SVS_B = (eAmt, where) => {\n  if (where === \"center\" || where === \"\") window.scrollBy(0, eAmt / 2)\n  if (where === \"top\") window.scrollBy(0, eAmt)\n}\n\nexport function findAllByKey(obj, keyToFind) {\n  return Object.entries(obj).reduce(\n    (acc, [key, value]) =>\n      key === keyToFind\n        ? acc.concat(value)\n        : typeof value === \"object\"\n        ? acc.concat(findAllByKey(value, keyToFind))\n        : acc,\n    []\n  )\n}\n\nexport const isBrowser = () => typeof window !== \"undefined\"\n\nexport const slugifyTitle = title => {\n  return title\n    ? title\n        .toLowerCase()\n        .replace(/ /g, \"-\")\n        .replace(/[^\\w-]+/g, \"\")\n    : \"\"\n}\n\nexport const returnNoOfWords = (text, n) => {\n  // This expressions returns the first N (any) characters plus any subsequent non-space characters.\n  var cut = text.indexOf(\" \", n)\n  if (cut === -1) return text\n  return text.substring(0, cut)\n}\nexport const toK = num => {\n  return Numeral(num).format(\"0.[00]a\")\n}\nconst priceFormatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  minimumFractionDigits: 2,\n})\n\nexport const formatNumber = (value, digits = 4, round = false) => {\n  const nOfDigits = Array.from(Array(digits), _ => 0).join(\"\")\n  const n = Number(value)\n  if (Number.isInteger(n) || value.length < 5) {\n    return n\n  }\n  if (round) {\n    return Number(Numeral(n).format(`0.${nOfDigits}`))\n  }\n  return Number(Numeral(n).format(`0.${nOfDigits}`, Math.floor))\n}\n\nexport const formattedNum = (number, usd = false, acceptNegatives = false) => {\n  if (isNaN(number) || number === \"\" || number === undefined) {\n    return usd ? \"$0\" : 0\n  }\n  let num = parseFloat(number)\n\n  if (num > 500000000) {\n    return (usd ? \"$\" : \"\") + toK(num.toFixed(0))\n  }\n\n  if (num === 0) {\n    if (usd) {\n      return \"$0\"\n    }\n    return 0\n  }\n  if (num > 0 && num < 0.001) {\n    return usd ? \"< $0.001\" : \"< 0.001\"\n  }\n\n  if (num < 0 && num > -0.001) {\n    return usd ? \"> -$0.001\" : \"> -0.001\"\n  }\n\n  if (num > 1000) {\n    return usd\n      ? \"$\" + Number(parseFloat(String(num)).toFixed(0)).toLocaleString()\n      : \"\" + Number(parseFloat(String(num)).toFixed(0)).toLocaleString()\n  }\n\n  if (usd) {\n    if (num < 0.1) {\n      return \"$\" + Number(parseFloat(String(num)).toFixed(3))\n    } else {\n      let usdString = priceFormatter.format(num)\n      return \"$\" + usdString.slice(1, usdString.length)\n    }\n  }\n\n  return Number(parseFloat(String(num)).toFixed(3))\n}\n\nexport const getRatePercentage = value => {\n  const rate = Number(value)\n  let ratePercentage = rate < 1 ? (1 - rate) * -1 : rate - 1\n  return ratePercentage * 100\n}\n"],"names":["numeral","_","decimal","binary","unformatRegex","VERSION","formats","locales","defaults","currentLocale","zeroFormat","nullFormat","defaultFormat","scalePercentBy100","options","Numeral","input","number","this","_input","_value","value","kind","unformatFunction","regexp","isNumeral","isNaN","replace","length","regexps","unformat","match","stringToNumber","Number","version","obj","numberToFormat","format","roundingFunction","abbrForce","abs","int","precision","signed","thousands","output","locale","negP","optDec","leadingCount","abbr","trillion","billion","million","thousand","neg","Math","includes","indexOf","RegExp","abbreviations","toString","split","toFixed","delimiters","slice","String","i","string","abbreviation","stringOriginal","currency","symbol","pow","min","search","insert","subString","start","reduce","array","callback","TypeError","t","Object","len","k","arguments","multiplier","x","parts","correctionFactor","Array","prototype","call","accum","next","mn","maxDecimals","optionals","boundedPrecision","optionalsRegExp","power","splitValue","minDecimals","max","key","toLowerCase","localeData","Error","reset","property","register","type","name","validate","val","culture","_decimalSep","_thousandSep","_currSymbol","_valArray","_abbrObj","_thousandRegEx","temp","console","warn","trim","e","substr","fn","clone","inputString","formatFunction","round","set","add","corrFactor","cback","curr","currI","O","subtract","multiply","divide","difference","ordinal","b","space","splice","join","base","suffixes","concat","filter","item","bytes","suffix","bytesMultiplier","symbols","before","after","toExponential","hours","floor","minutes","seconds","timeArray","SmoothVerticalScrolling","time","where","eAmt","getBoundingClientRect","top","curTime","window","setTimeout","SVS_B","scrollBy","slugifyTitle","title","returnNoOfWords","text","n","cut","substring","priceFormatter","Intl","NumberFormat","style","minimumFractionDigits","formatNumber","digits","nOfDigits","from","isInteger","formattedNum","usd","acceptNegatives","undefined","num","parseFloat","toK","toLocaleString","usdString","getRatePercentage","rate"],"sourceRoot":""}